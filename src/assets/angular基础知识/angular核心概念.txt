
Angular核心概念之一 :  模块

   module :  NG中一个抽象的容器 ， 用来对组件进行分组 ， 整个应用初始时有且只有一个主模块 : AppModule

Angular核心概念之二 : 组件

   组件 : 是一段可以反复使用的页面片段 , 如页头 ， 轮播 ， 手风琴 ， 输入条 ， 展示区域等等

   组件(Component) = 模板(Template) + 脚本(Script) + 样式(Style)
   (component = html + css + .ts)

   *** 在NG中  ， 任何一个组件必须声明在一个模块中

   自定义组件的步骤 :

      1. 创建组件class  （myConponent01.ts）

            例 :

              @Component({
                  selector : 'myC',
                  template : '<h2>这是我注册过的组件myComponent01,在app.component.html中使用HTML元素标签</h2>',
                  //templateUrl : 'xxx.html'
                  styleUrls : ['xxx.less']
                  ...
              })
              export class myComponent01 {

              }

      2. 在某个模块中注册组件class  （app.module.ts） 将创建的组件注册到了主模块中

            @NgModule({ // 表示是模块而非组件
              declarations: [ // 声明组件
                AppComponent,
                myComponent01 //将创建的组件注册到模块中
              ],
              ....
              })
              export class AppModule { }

      3. 使用已经注册过的组件   （app.component.html） 在对应的模板中使用标签

            <myC></myC>



   完整的自定义组件流程 :  注意在第三步的时候不要在自己组件的模板中使用自己的标签 ， 会导致循环造成栈溢出

         1.  myComponent02.component.ts
             myComponent02.component.html
             myComponent02.component.less

         2.  注册在app.module.ts模块

         3.  使用标签在app.component.html模板文件



   组件 .ts文件编写规范 :  （包括组件的脚本ts文件 ， 样式css文件 ， 模板html文件）

        1.   组件的 .ts文件 一律命名成 xxx.component.ts 表示这是组件的ts文件

        2.    @Component({   //组件上一定要标有装饰器
                 selector : 'xxx-myC02',  //别人使用时的标签
                 templateUrl : './xxx.component.html',  //引用html文件地址 ， 相对路径
                 styleUrls : ['./xxx.component.less']   //引用css样式文件地址 ， 相对路径 ， 可以有多个，所以是列表
              })

              export class MyC02Component {  //export表明导出 class , 可以被外界使用

              }


   组件注册在模板规范 :

       1.   在模块的.ts文件 :  @NgModule中的 declarations 中将组件 .ts文件类名注册进去

               @NgModule({ // 表示是模块而非组件
                          declarations: [ // 声明组件
                            AppComponent,
                            myComponent01, //将创建的组件注册到模块中
                            MyComponent02Component
                          ],


   使用标签在模板文件中的规范 :

       1.   一般来说子组件的标签都是在父组件的模板文件中使用

       2.   *** 禁止在本组件的模板文件中使用本组件的标签选择器

              ->  报错 : ERROR RangeError : Maximum call stack size exceeded  最大的调用栈溢出


   **** :

   常规开发模式 :

      1. 首先创建一个模块 ng g module xxx  （只包含.ts文件）
      2. 在该模块里面创建多个组件 ng g c xxx （每个组件都包含.html .less .ts文件）
      3. 将组件注册在该模块的ts文件中

      已经有模块或者在根模块下创建组件的情况 ， 可以直接跳过第一步创建组件

   ****


   注意一点 : 创建的组件内的css样式文件里的样式只有本组件能用 ， 如果想设置全局的样式 ， 要在 styles.less 文件中设置样式


   Node.js官方安装的工具 :

      npm : 第三方模块的维护工具
      npx : 第三方可执行文件的执行工具 ， npx可用于执行当前项目中 node_nodules/.bin目录下的可执行文件
      （如果一开始  npm install -g @angular/cli 不成功 ， 是通过复制项目得到的node_modules中的第三方模块
        可以使用 npx xxx 来执行可执行文件 ， 例如 : npx ng g c xxx）


   Angualr提供的创建组件的简化工具 :  会创建文件夹以及下面的四个文件 ts/html/less/ spec.ts(单元测试ts文件，可以删除)

     ng generate component 组件名
     npx ng generate component 组件名

     --> 简化 : ng g c 组件名

   Angualr提供的创建模块的简化工具 :

     ng generate module 模块名
     npx ng generate module 模块名

     --> 简化 : ng g module 模块名


   命令可以很方便的 创建组件 并 自动在组件所在的模块中注册组件 ，
   但是在哪个模板中使用组件的标签由自己决定 ， 不要忘了引用标签




Angular核心概念之三 : 数据绑定     --->  以下数据绑定操作代码均在 my-component03 文件中

    1. HTML绑定

         插值公式 (NG表达式) :   {{ }}

         插值表达式可以执行的操作 :   -->  my-component03.component.html

          1. 算数运算
          2. 比较运算
          3. 逻辑运算
          4. 三目运算符
          5. 调用函数

         不可以执行的操作 :

          1. 创建对象  插值表达式中禁止出现 new关键字
          2. JSON序列化  插值表达式中JSON 是 undefined
          3. ...



    2. 属性绑定

         形式1 : 直接在属性上使用插值表达式  例如 :

          <p title="{{name}}">这是段落 ，设置它的title属性为 ts文件中的name , (使用插值表达式来属性绑定 , 不推荐)</p>

         形式2 : 使用 []做属性绑定 例如 :

          <p [title]="name">这是段落 ，设置它的title属性为 ts文件中的name , (使用属性绑定 , 推荐)</p>


         *** 属性绑定特殊情况 :

                 通常情况下 ， 属性绑定的都是ts文件中的变量 ， 但是有些时候属性绑定的式常量 或者 常量变量拼接的内容
                 例如 :
                         <p [title] = "'这个人的姓名是' + name"></p>
                         <img src = "'../assets' + imgUrl"></img>

                 这个时候常量内容使用 '' 并使用 + 和变量拼接起来


    3. 指令绑定


Angular中的指令系统 :


   1. 循环绑定 :  *ngFor

        1. 要想清楚让哪个元素循环 ? 比如让 <ul> 里的 <li>元素循环 ， 那么 *ngFor就要写在 <li>上

        2. 格式 :

             //不带循环下标的
             1. *ngFor = "let 临时变量 of ts文件中的数据"

             //带循环下标的 ，将循环下标 index 赋值给 i
             2. *ngFor = "let 临时变量 of ts文件中的数据 ; index as i"


        例如 :

          1. <ul>
               <li *ngFor = "let star of starLists">
                  {{ star }}
               </li>
             </ul>

          2. <ul>
               <li *ngFor = "let star of starLists ; index as i">
                 {{ i }} - {{ star }} // i 是下标
               </li>
             </ul>


   2.  选择绑定 :  *ngIf

          1. 格式 :  *ngIf = "布尔表达式"

          2. 说明 : 如果布尔表达式的值为false ，则当前元素从 DOM树上删除

          例如 :

            <div *ngIf = "isPayingUser">
               <p>
                    此处内容为付费内容 ，只有当用户为付费用户时才可见
                    从ts文件中获取的 isPayingUser = true 可见
                    从ts文件中获取的 isPayingUser = false 不可见
                    ...
                    ...
                    ...
               </p>
            </div>


          3. *ngIf实现 if - else

             例如 :

                  <div *ngIf  = "personAge >= 18 ; else elseBlock">
                      年龄大于 18 可见内容
                  </div>
                  <ng-template #elseBlock> //条件不满足时走 else , 使用 # 为元素指定 id , *ngIf 里只写 # 后面的id即可
                    <div>
                       年龄小于 18 可见内容
                    </div>
                  </ng-template>

          *** if - else中 ， else的内容一定要包裹在 <ng-template></ng-template>中 ，在 <ng-template>标签内可以
              使用各种元素，但是外面必须用 <ng-template></ng-template>包裹 （ng-template后跟 #xxx 表示这是else的内容）



          4. *ngIf 练习  my-component04

          5. 写if-else时注意 *ngIf 与 <ng-template></ng-template> 之间不要加别的内容包括注释 ，不要断开

============================================================================================================


       特殊的选择绑定 : [ngSwitch] 搭配  *ngSwitchCase  和  *ngSwitchDefault  使用

          用法 :    -> my-component04

             <ANY [ngSiwtch] = "表达式">

                <ANY *ngSwitchCase = "值1"></ANY>
                <ANY *ngSwitchCase = "值2"></ANY> // 注意 : "" 绑定的是变量 ， 要绑定字符串值 -> "''"
                ...
                <ANY *ngSwitchDefault></ANY>

             <ANY>



   3.  样式绑定 :  [ngStyle]     ->  my-component04

          1. 样式绑定作为指令系统用的不是 * 而是中括号
          2. [ngStyle] = "Object对象（CSS样式）"  ngStyle绑定的必须是一个对象 ， 对象属性就是CSS样式名 ， 可以应用在任何标签上

                  例 : <button [ngStyle] = "ngStyleObject" (click) = "changeNgStyle()">加载更多</button>
                       这里样式绑定了一个对象ngStyleObject ,
                       ngStyleObject是在ts文件中的样式对象 :

                         //样式绑定对象
                         //不推荐将样式写在 ts脚本里面
                         //根据高内聚低耦合的原则样式应该和脚本分离 ，将样式抽取出来放在 .css文件中
                         ngStyleObject = {
                           backgroundColor : '#383',
                           color : '#910',
                           'border-color' : '#4f4'
                         }

                       通过点击事件改变ngStyleObject的属性值达到改变样式的功能 :

                         //点击事件 ，改变样式
                         //不推荐将样式写在此处
                         changeNgStyle() {
                            this.ngStyleObject.backgroundColor = '#010'
                            this.ngStyleObject.color = '#11f'
                            this.ngStyleObject["border-color"]= '#349'
                         }


   4.  样式绑定 :  [ngClass]     ->  my-component04

          1. [ngClass]也可以应用到任何标签元素上
          2. [ngClass]绑定必须是一个对象 ， 对象的属性就是CSS文件的class名 ，
             属性值为true/false , 为true时该class就出现 ， 为false时该class就不出现

               例 :  <button [ngClass] = "ngClassObject" (click) = "changeNgClass()">加载更多</button>

                         // 测试 [ngClass]
                         // [ngClass]绑定一个对象  ，对象中属性是样式class名 ， 属性值为 true/false（代表是否启用）
                         // 绑定的 Css class 的样式（css文件中有这些 class）
                         ngClassObject = {
                           btn : true,
                           'btn-danger' : false,  //烤串法则
                           'btn-success' : true   //如果样式都为 true ， 则游览器默认最后为 true 的样式覆盖掉前面
                         }

                         // 点击事件改变 [ngClass]样式绑定
                         changeNgClass(){
                           this.ngClassObject["btn"] = true;
                           this.ngClassObject["btn-danger"] = true;
                           this.ngClassObject["btn-success"] = false;
                         }


          3. 相比使用 [ngStyle] 更推荐使用 [ngClass] 绑定样式 ， 因为使用 [ngStyle]需要在
             脚本ts文件里直接修改样式 ， 造成样式和脚本的耦合 ， 使用 [ngClass] 将样式放在.css文件中 ， 使样式和脚本
             解耦 ， 在脚本文件中只需要控制对应样式是否启用（ true/false ? ）


   ***
     Angular中的指令分为三类 :

          1. 组件指令 (带模板 ，常用的创建组件)
          2. 结构性指令 : 会影响DOM树结构 ， 必须使用 * 开头  ，如 *ngFor / *ngIf (简而言之能决定这个标签元素是否显示)
          3. 属性型指令 : 不会影响DOM树结构 ， 只会影响元素外观或者行为 ， 必须用 [] 括起来 ， 如 [ngStyle] / [ngClass]
             (只能决定样式不能决定标签元素是否显示)
   ***


   ***
      html里面的有些标签是不能随意嵌套的 ，比如 <p>标签不能嵌套 <p>
      (因为游览器的自动补全功能，有些元素嵌套后会乱，例如<p>标签)
   ***




   4. 事件绑定

         事件绑定使用 ()  :  事件名使用 () 括起来 ， 处理函数名后面必须跟小括号 ， 有无参数看情况

         例如 :  (click) = "add()"
                (click) = "reduce(1)" //处理函数参数如何在 ts文件中取到暂不清楚 ，使用常量值代替



   5. 双向数据绑定  :  ngModel  （*** 重点）

        "双向" 指的分别是两个方向 :

               1. Model => View

                     模型数据变化则视图中数据跟着变化（后端获取数据渲染页面） , 即属性绑定 , 使用 []

               2. View  => Model

                     视图中数据变化（表单输入框改变，下拉框选择改变等等）模型数据跟着变化 , 本质是事件监听 , 使用 ()

        双向数据绑定兼而有之 ， 所以使用 [(ngModel)] 表示


   ***

      *** [(ngModel)] 使用问题 :

          报错实例 :

          Compiled with problems:X

          ERROR

          src/app/my-component04/my-component04.component.html:30:8
          - error NG8002: Can't bind to 'ngModel' since it isn't a known property of 'input'.

          30 <input [(ngModel)] = "userName" placeholder = "请输入用户名">
                    ~~~~~~~~~~~~~~~~~~~~~~~~

            src/app/my-component04/my-component04.component.ts:5:16
              5   templateUrl: './my-component04.component.html',
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Error occurs in the template of component MyComponent04Component.


          错误的原因是因为在项目中根本没有导入过 ngModel指令的模块

          导入常用模块过程解析 :

             在 app.module.ts 根模块中

                    @NgModule({ // 表示是模块而非组件
                      declarations: [ // 声明组件
                        AppComponent,
                        myComponent01, //将创建的组件注册到模块中
                        MyComponent02Component,
                        MyComponent03Component,
                        MyComponent04Component
                      ],
                      imports: [
                        BrowserModule,
                        AppRoutingModule
                      ],
                      providers: [],
                      bootstrap: [AppComponent] //引导启动主组件
                    })
                    export class AppModule { }

             存在imports数组 ， 该数组用于指定导入的模块 ，
             其中 BrowserModule 为游览器模块 ，只要Angular项目用于Web项目 ， 就必须导入此模块
             此模块导出了 CommonModule（ 包含 *ngFor/*ngIf基本指令 ）和 ApplicationModule两个核心模块
             并不包含FormsModule模块
             所以使用ngModel指令报错原因就是因为没有导入它所在模块 "FormsModule"
             导入步骤 :

                1. import {FormsModule} from "@angular/forms";

                2. imports: [
                      BrowserModule,
                      AppRoutingModule,
                      FormsModule //包含 ngModel 指令
                   ],


   ***

























