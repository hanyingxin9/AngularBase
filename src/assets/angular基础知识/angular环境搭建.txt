

设计原则和方法 :  提高程序的可维护性 可修改性 可扩展性

   1. YAGNI  :  不写不需要的功能或代码
   2. DRY    :  不要重复自己的代码
   3. OCP    :  开闭原则 ， 对扩展开放 对修改封闭
   4. LCHC   :  高内聚 ， 低耦合
   5. Dimeter Law :  迪米特法则 最少知识原则  ， 一个对象/组件只负责必须的少量功能


  MVVM框架的组成 : 数据绑定 指令系统 组件式编程 路由和导航 状态保持 第三方组件库



  Angular框架

      由 Google开发的 MVVM 框架 , 可用于开发 Web 移动端 桌面端 的前端程序的中大型框架

      AngularJS(version 1.x) 复杂 ，不建议使用

      Angular(version 2.x - 至今版本(15.x))  -> 推荐
          -----> 官网 :  http://angular.io
          -----> 中文镜像开发文档 :  http://angular.cn

      相比之下 vue更适合开发中小型项目 angular更适合开发中大型项目

      AngularJS (v1.x)开发方式 : 1.  script引入vue.js   2. 脚手架方式

      到了Angular(v2.x)以后开发方式只有通过脚手架的方式开发 :

               Angular (v2.x)开发方式 : 1.  脚手架方式


      搭建Angular开发环境 :

        前提 : Ng需要 Node.js v10.9以上版本  （通过命令行 > node -v 查看 node.js版本）
              如果 node.js版本过低可通过控制面板卸载 ， 在官网下载 LTS长期稳定版

        1. 下载并安装脚手架工具

              npm install -g @angular/cli  （默认仓库 : registry.npmjs.com 极不稳定）

              考虑到默认仓库不稳定可以使用第三方npm下载仓库
                 1. npm config get registry  （查看当前npm默认的下载仓库地址）
                 2. npm config set registry https://registry.npm.taobao.org/ （使用淘宝 npm镜像）

        2. 运行脚手架工具创建空白项目

              ng new myNgApp （在你选定的目录下创建新的空白项目）

              创建过程中会提示是否创建路由 和 css样式的文件类型（.css .scss .less）

        3. 进入空白项目并运行开发服务器

              cd myNgApp
              npm start

        4. 客户端访问测试

              http://127.0.0.1 : 端口号  (localhost:4200)


  package.json文件中有配置的命令 ， 包括启动命令 使用的工具版本等

  angular.json : NG项目的配置文件

      index : ./src/index.html        <app-root></app-root>
      main  : ./src/main.ts

  e2e  测试包

  node_modules 第三方模块

  src 源代码

    index.html  首页   <body></body>标签中<app-root></app-root>

    main.ts中引导启动模块 app.modules.ts


  与vue不同 ， vue项目中直接是组件的集合 ， 而angular中则是根据模块划分 ， 每个模块中再包含各个组件 ，
  所以vue更适合小型项目 ， 而angular更适合大型项目



Angular项目启动过程分析 :

      1. angular.json : NG项目的配置文件

            index :  ./src/index.html    <app-root></app-root>
            main  :  ./src/main.ts

      2. main.ts >  bootstrapModule(AppModule)

      3. app.module.ts >  bootstrap : [AppComponment]

      4. app.component.ts > selector : 'app-root'
                          > templateUrl : 'app.component.html'

      5. app.component.html > HTML片段




Angular思维导图 :


     1. 概述 :

          MVVM框架 ， 适用于中大型的Web , 移动App , 桌面项目

     2. 搭建开发环境 :

          1. 安装Node.js 和 npm , git
          2. 下载并安装脚手架工具  npm install -g @angular/cli
          3. 运行脚手架工具并创建空白项目 ng new 项目名
          4. 进入项目目录 ， 运行开发服务器  npm start
          5. 使用客户端访问测试  http://localhost:4200

     3. 项目启动过程 :

          1. angular.json文件中配置了 项目首页 index.html 和 项目访问入口ts文件 main.ts

          2. 项目通过 main.ts中的 :

                //引导启动模块
                platformBrowserDynamic().bootstrapModule(AppModule)
                  .catch(err => console.error(err));

             找到启动的主模块

          3. 在主模块中找到注册在里面的组件 :

                @NgModule({ // 表示是模块而非组件
                  declarations: [ // 声明组件
                    AppComponent,
                    myComponent01, //将创建的组件注册到模块中
                    MyComponent02Component,
                    MyComponent03Component
                  ],
                  imports: [
                    BrowserModule,
                    AppRoutingModule
                  ],
                  providers: [],
                  bootstrap: [AppComponent] //引导启动主组件
                })
                export class AppModule { }

          4. index.html的body中只有一个组件标签 <app-root></app-root>
             即app-component.ts组件 ， 其他组件都作为该组件的子组件或子组件的子组件存在

             *** 首页内容并不在index.html中 ， index.html的 body中只有 主组件<app-root></app-root>
             真正的模板内容就是<app-root></app-root>组件的模板内容 即app-component.html



     4. NG核心概念 : 模块 （module）

          用于对项目中的大量组件进行分组 ， 如用户模块 ，商品模块 ， 主引导模块（app.module.ts）


     5. NG核心概念 : 组件 （component）

          是一段可以重复使用的代码片段 ， 组件式编程可以提高代码的可维护性

          组件 = 脚本（Model） + 模板（view） + 样式

          创建组件 :

            1. 创建组件类并使用装饰器装饰
            2. 在某个模块中注册组件类
            3. 在模板中使用该组件

            简化组件创建过程命令 : [npx] ng g c XXX

          创建组件的组件类名是默认将创建的文件夹中的 '-' 替换成驼峰 例如 : my-component03 -> myComponent03Component

          组件的编写过程 ，先写出html模板文件内容 ， 再分别根据数据需要和样式写出 ts文件 和 css



     6. 增加代码可维护性的途径 :

           HTML : 组件化编程
           CSS  : 使用预编译样式语言 - Sass/SCSS/Stylus/less
           TS   : 面向对象 组件化编程


     ....

     7. Angular核心概念之数据绑定 :

        1. HTML绑定
        2. 属性绑定
        3. 指令绑定
        4. 事件绑定
        5. 双向数据绑定


    数据绑定与指令在 angular核心概念里 -> angular核心概念.txt







































